--- !ditz.rubyforge.org,2008-03-06/issue 
title: Native PDF/SVG export
desc: |-
  I should consider implementing PDF and SVG export within PuffinPlot
  itself. At first sight this seems insanely laborious -- it would 
  indeed be laborious, but the labour would be far less than that 
  required to implement full SVG and PDF export libraries -- after
  all, PuffinPlot uses only a tiny subset of the full specifications
  of these formats.
  
  Probably, the way to go would be to create an internal API for all
  PuffinPlot's graphics operations -- really not much more than lines,
  text, and outlined and filled polygons and circles. Then just write
  back-ends that plug into the interface. A lot of boilerplate, but
  the benefits would be a much smaller executable size, faster export,
  more compact and well-structured exported files, and (most 
  importantly) full control over the file format. No more trying
  to second-guess how iText et al. are going to deal with various
  Graphics2D calls.
type: :task
component: PuffinPlot
release: "1.2"
reporter: Pontus Lurcock <pont@talvi.net>
status: :unstarted
disposition: 
creation_time: 2012-05-10 16:46:09.098588 Z
references: []

id: 3b2b6678577d1674a9e51b6c02ba081d6e5e1b9d
log_events: 
- - 2012-05-10 16:46:16.994259 Z
  - Pontus Lurcock <pont@talvi.net>
  - created
  - This will probably not be done soon!
- - 2012-05-14 21:19:48.931377 Z
  - Pontus Lurcock <pont@talvi.net>
  - commented
  - |-
    Another advantage with defining an internal vector graphics API:
    I can include things which Graphics2D doesn't support. At present
    I am thinking specifically of grouping graphics elements, which
    is very handy for post-processing of SVG files (it would be nice
    to get one group per plot) but can't AFAIK be represented in
    Graphics2D -- it's irrelevant for drawing to the screen, after all.
