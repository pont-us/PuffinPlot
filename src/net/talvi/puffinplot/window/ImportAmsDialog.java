/* This file is part of PuffinPlot, a program for palaeomagnetic
 * data plotting and analysis. Copyright 2012-2019 Pontus Lurcock.
 *
 * PuffinPlot is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PuffinPlot is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PuffinPlot.  If not, see <http://www.gnu.org/licenses/>.
 */
package net.talvi.puffinplot.window;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import net.talvi.puffinplot.PuffinApp;

public class ImportAmsDialog extends javax.swing.JDialog {

    private static final Logger LOGGER =
            Logger.getLogger("net.talvi.puffinplot");
    
    private final PuffinApp app;

    /**
     * Creates new form ImportAmsDialog
     */
    public ImportAmsDialog(PuffinApp app) {
        super(app.getMainWindow(), true);
        this.app = app;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        overwriteSampleCorrectionCheckBox = new javax.swing.JCheckBox();
        overwriteFormationCorrectionCheckBox = new javax.swing.JCheckBox();
        magneticNorthCheckBox = new javax.swing.JCheckBox();
        importButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Import AMS data from ASC file");

        overwriteSampleCorrectionCheckBox.setText("Overwrite existing sample orientations");
        overwriteSampleCorrectionCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                overwriteSampleCorrectionCheckBoxActionPerformed(evt);
            }
        });

        overwriteFormationCorrectionCheckBox.setText("Overwrite existing formation orientations");

        magneticNorthCheckBox.setText("Orientations are relative to magnetic north");
        magneticNorthCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                magneticNorthCheckBoxActionPerformed(evt);
            }
        });

        importButton.setText("Import");
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(overwriteSampleCorrectionCheckBox)
                    .addComponent(overwriteFormationCorrectionCheckBox)
                    .addComponent(magneticNorthCheckBox))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cancelButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(importButton)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(overwriteSampleCorrectionCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(overwriteFormationCorrectionCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(magneticNorthCheckBox)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(importButton)
                    .addComponent(cancelButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void overwriteSampleCorrectionCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_overwriteSampleCorrectionCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_overwriteSampleCorrectionCheckBoxActionPerformed

    private void magneticNorthCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_magneticNorthCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_magneticNorthCheckBoxActionPerformed

    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed
        setVisible(false);
        try {
            final List<File> files = app.openFileDialog("Select AMS files");
            app.getCurrentSuite().importAmsFromAsc(files,
                    magneticNorthCheckBox.isSelected(),
                    overwriteSampleCorrectionCheckBox.isSelected(),
                    overwriteFormationCorrectionCheckBox.isSelected());
            app.getMainWindow().suitesChanged();
        } catch (IOException ex) {
            LOGGER.log(Level.SEVERE, null, ex);
            app.errorDialog("Error importing AMS", ex.getLocalizedMessage());
        }
    }//GEN-LAST:event_importButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton importButton;
    private javax.swing.JCheckBox magneticNorthCheckBox;
    private javax.swing.JCheckBox overwriteFormationCorrectionCheckBox;
    private javax.swing.JCheckBox overwriteSampleCorrectionCheckBox;
    // End of variables declaration//GEN-END:variables
}
